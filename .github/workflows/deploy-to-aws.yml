name: Deploy RAG to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        python -m pytest test_api.py -v || echo "Tests completed"
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Deploy to EC2
      run: |
        echo "=== Creating deployment package ==="
        tar -czf rag-deployment.tar.gz \
          src/ \
          requirements.txt \
          README.md \
          nginx-configs/ \
          docker-compose.yml \
          AttentionAllYouNeed.pdf \
          --exclude='src/__pycache__' \
          --exclude='*.pyc'
        
        echo "=== Uploading to EC2 ==="
        # Create SSH key from secret
        echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/rag-keypair.pem
        chmod 400 /tmp/rag-keypair.pem
        
        # Upload and deploy
        scp -i /tmp/rag-keypair.pem -o StrictHostKeyChecking=no \
          rag-deployment.tar.gz ec2-user@${{ secrets.EC2_HOST }}:/tmp/
        
        ssh -i /tmp/rag-keypair.pem -o StrictHostKeyChecking=no \
          ec2-user@${{ secrets.EC2_HOST }} << 'EOSSH'
        
        echo "=== Deploying new version ==="
        cd /opt/rag-app
        
        # Backup current version
        sudo cp -r src src_backup_$(date +%Y%m%d_%H%M%S)
        
        # Extract new version
        tar -xzf /tmp/rag-deployment.tar.gz
        
        # Update environment
        source rag_env_38/bin/activate
        pip install -r requirements.txt --upgrade
        
        # Fix Python path issue
        echo 'export PYTHONPATH=/opt/rag-app/src:$PYTHONPATH' >> ~/.bashrc
        
        # Install Docker if not present
        if ! command -v docker &> /dev/null; then
          sudo yum update -y
          sudo yum install -y docker
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -a -G docker ec2-user
        fi
        
        # Install Docker Compose if not present
        if ! command -v docker-compose &> /dev/null; then
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
        fi
        
        # Start Weaviate
        sudo docker-compose up -d || echo "Weaviate start failed, using mock store"
        
        # Update systemd service with PYTHONPATH
        sudo tee /etc/systemd/system/rag-app.service > /dev/null << 'EOF'
        [Unit]
        Description=RAG Application
        After=network.target
        
        [Service]
        Type=simple
        User=ec2-user
        WorkingDirectory=/opt/rag-app
        Environment=PYTHONPATH=/opt/rag-app/src
        ExecStart=/opt/rag-app/rag_env_38/bin/uvicorn src.api:app --host 0.0.0.0 --port 8000
        Restart=always
        RestartSec=3
        
        [Install]
        WantedBy=multi-user.target
        EOF

        # Reload and restart service
        sudo systemctl daemon-reload
        sudo systemctl restart rag-app
        sudo systemctl enable rag-app
        sudo systemctl status rag-app --no-pager
        
        # Test deployment
        sleep 5
        curl -k https://localhost/health || echo "Health check failed"
        
        echo "âœ… Deployment completed"
        EOSSH
        
        # Cleanup
        rm /tmp/rag-keypair.pem
        
    - name: Notify deployment status
      run: |
        echo "ðŸš€ RAG system deployed to AWS EC2"
        echo "ðŸ“¡ URL: https://${{ secrets.EC2_HOST }}"
        echo "ðŸ”‘ Use bearer token for authentication"
